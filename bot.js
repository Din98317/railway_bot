const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const nodeCron = require('node-cron');
const express = require('express');

const app = express();

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const JSONBIN_ID = process.env.JSONBIN_ID;
const JSONBIN_ACCESS_KEY = process.env.JSONBIN_ACCESS_KEY;
const MINI_APP_URL = process.env.MINI_APP_URL;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º polling —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Railway
const bot = new TelegramBot(TOKEN, { 
    polling: {
        interval: 300,
        autoStart: false
    }
});

// Middleware
app.use(express.json());
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    if (req.method === 'OPTIONS') return res.sendStatus(200);
    next();
});

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const JSONBIN_URL = `https://api.jsonbin.io/v3/b/${JSONBIN_ID}/latest`;
const JSONBIN_PUT_URL = `https://api.jsonbin.io/v3/b/${JSONBIN_ID}`;
const headers = {
    'X-Master-Key': JSONBIN_ACCESS_KEY,
    'Content-Type': 'application/json'
};

let families = {};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
async function getTasks() {
    try {
        const response = await axios.get(JSONBIN_URL, { headers });
        return response.data.record.tasks || [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error.message);
        return [];
    }
}

async function saveTasks(tasks) {
    try {
        const dataToSave = { tasks, families };
        await axios.put(JSONBIN_PUT_URL, dataToSave, { headers });
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSONBin');
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const familyTasks = tasks.filter(task => task.isFamilyTask).length;
        const personalTasks = tasks.filter(task => !task.isFamilyTask).length;
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${personalTasks} –ª–∏—á–Ω—ã—Ö, ${familyTasks} —Å–µ–º–µ–π–Ω—ã—Ö –∑–∞–¥–∞—á, ${Object.keys(families).length} —Å–µ–º–µ–π`);
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
        if (error.response) {
            console.error('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
        }
        return false;
    }
}

async function loadData() {
    try {
        const response = await axios.get(JSONBIN_URL, { headers });
        const data = response.data.record;
        families = data.families || {};
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        console.log(`üìä –ó–∞–¥–∞—á: ${data.tasks?.length || 0}, –°–µ–º–µ–π: ${Object.keys(families).length}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
        families = {};
    }
}

function getUserFamily(userId) {
    for (let familyId in families) {
        if (families[familyId].members.includes(userId.toString())) {
            return familyId;
        }
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
async function createFamily(userId, familyName) {
    try {
        const familyId = Date.now().toString();
        families[familyId] = {
            id: familyId,
            name: familyName,
            members: [userId.toString()],
            createdBy: userId,
            createdAt: new Date().toISOString()
        };
        
        const tasks = await getTasks();
        const saved = await saveTasks(tasks);
        
        if (!saved) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–º—å—é');
        }
        
        console.log(`‚úÖ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞: ${familyName} (ID: ${familyId})`);
        return familyId;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–µ–º—å—é
async function addToFamily(familyId, userId) {
    try {
        if (families[familyId] && !families[familyId].members.includes(userId.toString())) {
            families[familyId].members.push(userId.toString());
            
            const tasks = await getTasks();
            const saved = await saveTasks(tasks);
            
            if (!saved) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
            }
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–º—å—é ${familyId}`);
            return true;
        }
        return false;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ–º—å—é:', error);
        throw error;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
function getTimeText(value, unit) {
    if (unit === 'hours') {
        if (value === 1) return '—á–∞—Å';
        if (value >= 2 && value <= 4) return '—á–∞—Å–∞';
        return '—á–∞—Å–æ–≤';
    } else if (unit === 'minutes') {
        if (value === 1) return '–º–∏–Ω—É—Ç—É';
        if (value >= 2 && value <= 4) return '–º–∏–Ω—É—Ç—ã';
        return '–º–∏–Ω—É—Ç';
    }
    return unit;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendNotification(task, timeValue, timeText) {
    const taskDate = new Date(task.datetime);
    const message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ß–µ—Ä–µ–∑ ${timeText} –Ω–∞—á–Ω–µ—Ç—Å—è:\n"${task.title}"\nüìÖ ${taskDate.toLocaleString('ru-RU')}`;
    
    let sentSuccessfully = true;

    try {
        // –î–ª—è –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é
        if (!task.isFamilyTask) {
            await bot.sendMessage(task.userId, message);
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ ${timeText} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${task.userId} –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}"`);
        } else {
            // –î–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –∑–∞–¥–∞—á - –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ–º—å–∏
            const family = families[task.familyId];
            if (family) {
                for (const memberId of family.members) {
                    try {
                        await bot.sendMessage(memberId, message);
                        console.log(`‚úÖ –°–µ–º–µ–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ ${timeText} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${memberId} –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}"`);
                    } catch (error) {
                        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É ${memberId}:`, error.message);
                        sentSuccessfully = false;
                    }
                }
            }
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ ${timeText}:`, error.message);
        sentSuccessfully = false;
    }

    return sentSuccessfully;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkNotifications() {
    try {
        const tasks = await getTasks();
        const now = new Date();
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π... –ó–∞–¥–∞—á: ${tasks.length}`);
        console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toLocaleString('ru-RU')}`);

        let notificationsSent = 0;
        let updated = false;

        for (const task of tasks) {
            const taskDate = new Date(task.datetime);
            const timeDiff = taskDate.getTime() - now.getTime();
            const hoursDiff = timeDiff / (1000 * 60 * 60);

            console.log(`üìä –ó–∞–¥–∞—á–∞ "${task.title}": —á–µ—Ä–µ–∑ ${hoursDiff.toFixed(2)} —á–∞—Å–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–æ: ${task.notified}`);

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 —á–∞—Å–æ–≤ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏)
            if (!task.notified && hoursDiff <= 5 && hoursDiff > 4.98) {
                const sent = await sendNotification(task, 5, '5 —á–∞—Å–æ–≤');
                if (sent) {
                    task.notified = true;
                    updated = true;
                    notificationsSent++;
                }
            }
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å
            else if (hoursDiff <= 1 && hoursDiff > 0.98) {
                await sendNotification(task, 1, '1 —á–∞—Å');
                notificationsSent++;
            }
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç
            else if (hoursDiff <= 0.5 && hoursDiff > 0.48) {
                await sendNotification(task, 30, '30 –º–∏–Ω—É—Ç');
                notificationsSent++;
            }
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç
            else if (hoursDiff <= 0.25 && hoursDiff > 0.23) {
                await sendNotification(task, 15, '15 –º–∏–Ω—É—Ç');
                notificationsSent++;
            }
        }

        if (updated) {
            await saveTasks(tasks);
            console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationsSent}, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
        } else if (notificationsSent > 0) {
            console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationsSent}`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const userId = msg.chat.id;
    const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (${userId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);

    const familyId = getUserFamily(userId);
    const familyText = familyId ? `\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—ã –≤ —Å–µ–º—å–µ "${families[familyId].name}"` : '\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /createfamily —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é';

    const keyboard = {
        inline_keyboard: [[{
            text: 'üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏',
            web_app: { url: MINI_APP_URL }
        }]]
    };

    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ–º–µ–π–Ω—ã–π –∑–∞–¥–∞—á–Ω–∏–∫!${familyText}\n\nüìù –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏\nüîî –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–∞–±–æ—Ç–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å —Å–µ–º—å–µ–π\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

    bot.sendMessage(userId, welcomeMessage, {
        reply_markup: keyboard
    }).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
    });
});

// –ö–æ–º–∞–Ω–¥–∞ /createfamily
bot.onText(/\/createfamily (.+)/, async (msg, match) => {
    const userId = msg.chat.id;
    const familyName = match[1];

    try {
        if (getUserFamily(userId)) {
            await bot.sendMessage(userId, '‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ!');
            return;
        }

        if (familyName.length < 2 || familyName.length > 50) {
            await bot.sendMessage(userId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        const familyId = await createFamily(userId, familyName);
        await bot.sendMessage(userId, 
            `‚úÖ –°–µ–º—å—è "${familyName}" —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π:\n` +
            `/invite [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n\n` +
            `üí° –í–∞—à ID: ${userId}\n` +
            `–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å —Ç–µ–º–∏, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å.`
        );
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏:', error);
        await bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /invite
bot.onText(/\/invite (.+)/, async (msg, match) => {
    const userId = msg.chat.id;
    const inviteUserId = match[1];

    try {
        const familyId = getUserFamily(userId);
        if (!familyId) {
            await bot.sendMessage(userId, '‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ! –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /createfamily [–Ω–∞–∑–≤–∞–Ω–∏–µ]');
            return;
        }

        const family = families[familyId];
        const added = await addToFamily(familyId, inviteUserId);

        if (added) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É
            try {
                await bot.sendMessage(
                    inviteUserId, 
                    `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ —Å–µ–º—å—é "${family.name}"!\n\n` +
                    `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—â–∏–µ –∑–∞–¥–∞—á–∏.`
                );
            } catch (tgError) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É:', tgError.message);
            }

            await bot.sendMessage(userId, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —Å–µ–º—å—é!');
        } else {
            await bot.sendMessage(userId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        await bot.sendMessage(userId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /myfamily
bot.onText(/\/myfamily/, async (msg) => {
    const userId = msg.chat.id;
    
    const familyId = getUserFamily(userId);
    if (!familyId) {
        await bot.sendMessage(userId, '‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.\n–°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é: /createfamily [–Ω–∞–∑–≤–∞–Ω–∏–µ]');
        return;
    }

    const family = families[familyId];
    let message = `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è "${family.name}"\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ (${family.members.length}):\n`;
    
    for (const memberId of family.members) {
        try {
            const user = await bot.getChatMember(memberId, memberId);
            const userName = user.user.first_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${memberId}`;
            message += `‚Ä¢ ${userName} (ID: ${memberId})\n`;
        } catch (error) {
            message += `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${memberId}\n`;
        }
    }

    message += `\nüí° –î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n/invite [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n\n–í–∞—à ID: ${userId}`;

    await bot.sendMessage(userId, message);
});

// –ö–æ–º–∞–Ω–¥–∞ /mytasks
bot.onText(/\/mytasks/, async (msg) => {
    const userId = msg.chat.id;
    
    console.log(`üìã –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    try {
        const tasks = await getTasks();
        const familyId = getUserFamily(userId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ + –∑–∞–¥–∞—á–∏ —Å–µ–º—å–∏
        const userTasks = tasks.filter(task => 
            task.userId == userId || 
            (task.familyId && task.familyId === familyId)
        );
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userTasks.length}`);

        if (userTasks.length === 0) {
            await bot.sendMessage(userId, 'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n\n–û—Ç–∫—Ä–æ–π—Ç–µ Mini App —á–µ—Ä–µ–∑ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!');
            return;
        }

        let message = 'üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n';
        userTasks.forEach((task, index) => {
            const date = new Date(task.datetime).toLocaleString('ru-RU');
            const status = task.notified ? 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–æ' : (new Date(task.datetime) < new Date() ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '‚è∞ –û–∂–∏–¥–∞–µ—Ç');
            const type = task.isFamilyTask ? 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–∞—è' : 'üë§ –õ–∏—á–Ω–∞—è';
            message += `${index + 1}. ${task.title}\n   ${type}\n   üìÖ ${date}\n   ${status}\n\n`;
        });

        await bot.sendMessage(userId, message);
        console.log(`‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        await bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.onText(/\/testnotifications/, async (msg) => {
    const userId = msg.chat.id;
    
    try {
        await bot.sendMessage(userId, 'üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
        await checkNotifications();
        await bot.sendMessage(userId, '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        await bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
    const userId = msg.chat.id;
    
    const helpMessage = `üìñ –°–µ–º–µ–π–Ω—ã–π –∑–∞–¥–∞—á–Ω–∏–∫ - –∫–æ–º–∞–Ω–¥—ã:

/start - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/mytasks - –ú–æ–∏ –∑–∞–¥–∞—á–∏ (–ª–∏—á–Ω—ã–µ –∏ —Å–µ–º–µ–π–Ω—ã–µ)
/createfamily [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é
/invite [ID] - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ —Å–µ–º—å—é
/myfamily - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ
/testnotifications - –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –°–ø—Ä–∞–≤–∫–∞

üì± –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ Mini App:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∏ —Å–µ–º–µ–π–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å–µ–º—å–∏

üí° –í–∞—à ID: ${userId} - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è`;

    bot.sendMessage(userId, helpMessage).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
    });
});

// ========== –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø MINI APP ==========

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –∏–∑ Mini App
app.post('/createfamily', async (req, res) => {
    try {
        const { userId, familyName } = req.body;
        
        console.log('üè† –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏:', { userId, familyName });

        if (!userId || !familyName) {
            return res.status(400).json({ 
                success: false, 
                error: 'userId –∏ familyName –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        if (getUserFamily(userId)) {
            return res.status(400).json({ 
                success: false, 
                error: '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ' 
            });
        }

        const familyId = await createFamily(userId, familyName);

        res.status(200).json({ 
            success: true, 
            message: '–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞',
            familyId: familyId,
            family: families[familyId]
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏' 
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Å–µ–º—å—é –∏–∑ Mini App
app.post('/invitetofamily', async (req, res) => {
    try {
        const { userId, inviteUserId } = req.body;
        
        console.log('üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:', { userId, inviteUserId });

        if (!userId || !inviteUserId) {
            return res.status(400).json({ 
                success: false, 
                error: 'userId –∏ inviteUserId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        const familyId = getUserFamily(userId);
        if (!familyId) {
            return res.status(400).json({ 
                success: false, 
                error: '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ' 
            });
        }

        const family = families[familyId];
        const added = await addToFamily(familyId, inviteUserId);

        if (added) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É
            try {
                await bot.sendMessage(
                    inviteUserId, 
                    `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ —Å–µ–º—å—é "${family.name}"!\n\n` +
                    `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—â–∏–µ –∑–∞–¥–∞—á–∏.`
                );
            } catch (tgError) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É:', tgError.message);
            }

            res.status(200).json({ 
                success: true, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —Å–µ–º—å—é'
            });
        } else {
            res.status(400).json({ 
                success: false, 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è' 
            });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏' 
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–º—å–µ
app.post('/getfamily', async (req, res) => {
    try {
        const { userId } = req.body;
        
        if (!userId) {
            return res.status(400).json({ 
                success: false, 
                error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
            });
        }

        const familyId = getUserFamily(userId);
        const family = familyId ? families[familyId] : null;

        res.status(200).json({ 
            success: true, 
            family: family,
            hasFamily: !!familyId
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–º—å–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–º—å–µ' 
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
app.post('/gettasks', async (req, res) => {
    try {
        const { userId } = req.body;
        if (!userId) return res.status(400).json({ success: false, error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });

        const tasks = await getTasks();
        const familyId = getUserFamily(userId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ + –∑–∞–¥–∞—á–∏ —Å–µ–º—å–∏
        const userTasks = tasks.filter(task => 
            task.userId == userId || 
            (task.familyId && task.familyId === familyId)
        );
        
        res.json({ 
            success: true, 
            tasks: userTasks, 
            count: userTasks.length,
            family: familyId ? families[familyId] : null
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
app.post('/addtask', async (req, res) => {
    try {
        const taskData = req.body;
        console.log('üì® –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:', taskData);

        if (!taskData.userId || !taskData.title || !taskData.datetime) {
            return res.status(400).json({ success: false, error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
        }

        const familyId = getUserFamily(taskData.userId);
        const isFamilyTask = taskData.isFamilyTask || false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ–º–µ–π–Ω—É—é –∑–∞–¥–∞—á—É
        if (isFamilyTask && !familyId) {
            return res.status(400).json({ 
                success: false, 
                error: '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ —Å–µ–º—å–µ' 
            });
        }

        const newTask = {
            id: Date.now().toString(),
            userId: taskData.userId,
            title: taskData.title,
            datetime: taskData.datetime,
            notified: false,
            createdAt: new Date().toISOString(),
            isFamilyTask: isFamilyTask,
            familyId: isFamilyTask ? familyId : null
        };

        const tasks = await getTasks();
        tasks.push(newTask);
        await saveTasks(tasks);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ–º—å–∏ –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –∑–∞–¥–∞—á
        if (isFamilyTask && familyId) {
            const family = families[familyId];
            if (family) {
                for (const memberId of family.members) {
                    if (memberId !== taskData.userId.toString()) {
                        try {
                            await bot.sendMessage(
                                memberId, 
                                `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ù–æ–≤–∞—è —Å–µ–º–µ–π–Ω–∞—è –∑–∞–¥–∞—á–∞!\n"${taskData.title}"\nüìÖ ${new Date(taskData.datetime).toLocaleString('ru-RU')}`
                            );
                        } catch (tgError) {
                            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É:', tgError.message);
                        }
                    }
                }
            }
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
            const taskType = isFamilyTask ? '—Å–µ–º–µ–π–Ω–∞—è –∑–∞–¥–∞—á–∞' : '–ª–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞';
            await bot.sendMessage(
                taskData.userId, 
                `‚úÖ ${taskType} "${taskData.title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 5 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞.`
            );
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', error.message);
        }

        res.json({ success: true, message: '–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', taskId: newTask.id });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
app.put('/updatetask', async (req, res) => {
    try {
        const { taskId, userId, title, datetime } = req.body;
        
        console.log('‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', { taskId, userId, title, datetime });

        if (!taskId || !userId) {
            return res.status(400).json({ 
                success: false, 
                error: 'taskId –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        const tasks = await getTasks();
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        
        if (taskIndex === -1) {
            return res.status(404).json({ 
                success: false, 
                error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const task = tasks[taskIndex];
        const familyId = getUserFamily(userId);
        
        // –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏:
        // 1. –≠—Ç–æ –Ω–∞—à–∞ –ª–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞
        // 2. –≠—Ç–æ —Å–µ–º–µ–π–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏ –º—ã –≤ —Ç–æ–π –∂–µ —Å–µ–º—å–µ
        const canEdit = task.userId == userId || 
                       (task.familyId && task.familyId === familyId);
        
        if (!canEdit) {
            return res.status(403).json({ 
                success: false, 
                error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏' 
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if (title) tasks[taskIndex].title = title;
        if (datetime) {
            tasks[taskIndex].datetime = datetime;
            tasks[taskIndex].notified = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        }

        const saved = await saveTasks(tasks);

        if (!saved) {
            return res.status(500).json({ 
                success: false, 
                error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π' 
            });
        }

        res.status(200).json({ 
            success: true, 
            message: '–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            task: tasks[taskIndex]
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏' 
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
app.delete('/deletetask', async (req, res) => {
    try {
        const { taskId, userId } = req.body;
        
        console.log('üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', { taskId, userId });

        if (!taskId || !userId) {
            return res.status(400).json({ 
                success: false, 
                error: 'taskId –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        const tasks = await getTasks();
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        
        if (taskIndex === -1) {
            return res.status(404).json({ 
                success: false, 
                error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        const task = tasks[taskIndex];
        const familyId = getUserFamily(userId);
        
        // –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –µ—Å–ª–∏:
        // 1. –≠—Ç–æ –Ω–∞—à–∞ –ª–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞
        // 2. –≠—Ç–æ —Å–µ–º–µ–π–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏ –º—ã –≤ —Ç–æ–π –∂–µ —Å–µ–º—å–µ
        const canDelete = task.userId == userId || 
                         (task.familyId && task.familyId === familyId);
        
        if (!canDelete) {
            return res.status(403).json({ 
                success: false, 
                error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏' 
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª—è–µ–º–æ–π –∑–∞–¥–∞—á–µ –¥–ª—è –ª–æ–≥–æ–≤
        const deletedTask = tasks[taskIndex];
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        tasks.splice(taskIndex, 1);

        const saved = await saveTasks(tasks);

        if (!saved) {
            return res.status(500).json({ 
                success: false, 
                error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π' 
            });
        }

        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: "${deletedTask.title}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);

        res.status(200).json({ 
            success: true, 
            message: '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏' 
        });
    }
});

// Health check
app.get('/', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: 'Family Task Manager Bot is running',
        familiesCount: Object.keys(families).length,
        timestamp: new Date().toISOString()
    });
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        service: 'Family Task Manager Bot',
        time: new Date().toLocaleString('ru-RU'),
        uptime: process.uptime(),
        familiesCount: Object.keys(families).length
    });
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
nodeCron.schedule('*/5 * * * *', checkNotifications);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (—Å 8 —É—Ç—Ä–∞ –¥–æ 10 –≤–µ—á–µ—Ä–∞)
nodeCron.schedule('* 8-22 * * *', checkNotifications);

// –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± Mini App URL: ${MINI_APP_URL}`);
    
    await loadData();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º polling
    bot.startPolling().then(() => {
        console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
        console.log('‚úÖ –°–µ–º–µ–π–Ω—ã–π –∑–∞–¥–∞—á–Ω–∏–∫ –≥–æ—Ç–æ–≤!');
        console.log('‚è∞ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞:');
        console.log('   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 5 —á–∞—Å–æ–≤');
        console.log('   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å');
        console.log('   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 30 –º–∏–Ω—É—Ç');
        console.log('   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç');
    }).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error));
bot.on('polling_error', (error) => console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error));

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, graceful shutdown...');
    process.exit(0);
});
